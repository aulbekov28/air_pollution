using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;

namespace Dissertation.Service.IntegrationService.Classes
{
    public class Predictor : IPredictor
    {
        public async void Make()
        {
            await Task.Run(() => ExecturePythonScript());
        }

        //TODO
        public string ExecturePythonScript()
        {
            try
            {
                return Run_cmd("D:/Dropbox/PredictionModel/Prediction-Folium.py");
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public string Run_cmd(string cmd ="", string args="")
        {
            ProcessStartInfo start = new ProcessStartInfo
            {
                //FileName = "D:/Python/python.exe",
                FileName = "python",
                Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args),
                UseShellExecute = false,// Do not use OS shell
                CreateNoWindow = true, // We don't need new window
                RedirectStandardOutput = true,// Any output, generated by application will be redirected back
                RedirectStandardError = true // Any error in standard output will be redirected back (for example exceptions)
            };
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    return result;
                }
            }
        }
    }
}